pico-8 cartridge // http://www.pico-8.com
version 42
__lua__
function _init()
		map_setup()
  player_init()
  bullet_init()
  asteroid_init()

end

function _update()

	player_update() 
	bullet_update()
	asteroid_update()
	bullet_hit(bullets,asteroids)
	crash(plr,asteroids)

end

function _draw()
  cls()

	player_draw(plr)
	bullet_draw()
	asteroid_draw()
end

-->8
-- player --
function player_init()

	plr={
	angle=0,
	cx=64,
	cy=64,
	vx=0,
	vy=0,
	r = 6,
	health = 10

	
	}
	
end

function player_update()
	move(plr)
end

function player_draw(plr)

-- angle of rotation (should be updated each frame)
-- assume angle is already defined

-- calculate triangle points
x1 = plr.cx + cos(plr.angle) * plr.r
y1 = plr.cy + sin(plr.angle) * plr.r

x2 = plr.cx + cos(plr.angle + 0.66) * plr.r
y2 = plr.cy + sin(plr.angle + 0.66) * plr.r

x3 = plr.cx + cos(plr.angle + 1.32) * plr.r
y3 = plr.cy + sin(plr.angle + 1.32) * plr.r


-- draw triangle
line(x1, y1, x2, y2, 13) -- right
line(x2, y2, x3, y3, 6) -- bottom
line(x3, y3, x1, y1, 13) -- left
print(plr.angle)
print(plr.health)


end


function move(plr)

  -- moves toward the direction
  if btn(⬆️) then
  	plr.vx += cos(plr.angle) * 2
  	plr.vy += sin(plr.angle) * 2
  end
  

  -- rotation
  if btn(⬅️) then
  plr.angle -= 0.05
  end
  
  if btn(➡️) then
  	plr.angle += 0.05
  end
  
-- apply friction every frame
		plr.vx *= 0.75
		plr.vy *= 0.75
  
-- ship position  
  plr.cx += plr.vx 
  plr.cy += plr.vy   

		-- when out of screen
  plr.cx = (plr.cx+128)%128
  plr.cy = (plr.cy+128)%128

  
end
-->8
-- bullet --

function bullet_init()
	
	-- table for bullets
	bullets={}
end

-- what bullets do
function bullet_update()

	-- checks every frame if the
	-- function was called
	
	shoot(plr)
	
	-- for every bullet in table
	for b in all(bullets) do
	
	-- bullets go straight 
	-- based on the position
	-- ship was pointing at
		b.x+=b.spdx 
		b.y+=b.spdy
		
	-- if bullet is out of map
		if b.x > 128
		
			then
			-- deletes 
			del(bullets,b)
			
		end -- if end
		
	end -- for loop ebd
		
end

function bullet_draw()

	-- draw each bullet created 
	for b in all(bullets) do
	
	-- spr, x,y
		spr(16,b.x,b.y)
	
	end	
	
end

function shoot(plr)

	-- add to the table bullets
	-- the following 
	if btnp(🅾️) then
	
	add(bullets, {
	
	-- bullet starting point
	x= x1 -3 ,  
	y= y1 -7 , 
	dmg = 3,
	-- bullet goes the way ship is
	-- pointing at 
	spdx = plr.vx + cos(plr.angle)*3,
	spdy = plr.vy + sin(plr.angle)*3
	
	})

	end
	
end


-->8
-- asteroid creation --
function asteroid_init()

	-- asteroids table
	asteroids={}
	creation_time=0
end

function asteroid_update()

	creation_time+=1
	-- every second create
	if creation_time >= 30 then
	
	add(asteroids, {
	x=rnd(68) ,  
	y=rnd(10) , 
	speed = 0.7,
	dmg = 10,
	
	-- select a random sprite
	sprite = rnd({46,44,42,14}),
	health = 10
	
	})
	
	-- reset the creating time
		creation_time=0

end

	for a in all(asteroids) do
	
	--	a.x+=a.speed 
		a.y+=a.speed
		
		if a.x > 128
			then
			del(asteroids,a)
		end
			
	end	
	
end

function asteroid_draw()
	
		for a in all(asteroids) do
	
			spr(a.sprite,a.x,a.y,2,2)
	
		end	

end
-->8
-- world --

function map_setup()
	
	-- tile type
	aste=0
	small_aste=1 
	
end



function is_tile(tile_type,x,y)

		-- what spr is the tile 
		
			tile =	mget(flr(x),flr(y))
	
		-- tile has flag
		has_flag = fget(tile,tile_type)

		-- if true
		return has_flag
	
end

function contact(asteroids)

	tile_size = 16
	
		local	x1 =	x / tile_size
		local	y1 = y / tile_size
		local	x2 = (x + 14) / tile_size
		local	y2 = (y + 14) / tile_size	
	
		return not
		
		 (
		  is_tile(aste,x1,y1) or
		  is_tile(aste,x2,y1) or
		  is_tile(aste,x1,y2) or
		  is_tile(aste,x2,y2)
		  
		 ) 

end

-- bullets hit asteroid
function bullet_hit(bullets,asteroids)

		-- for every bullet
			for b in all(bullets) do
			
		-- for every asteroid	
					for a in all(asteroids)do
						
								-- contact 
								if abs(a.x - b.x) < 10 and abs(a.y - b.y) < 10 then
								
									-- delete bullet after contact
									a.health -= b.dmg
									del(bullets,b)
									
									-- delete asteoid after health reaches 0
									if a.health <= 0 then
											asteroid_destroyed(asteroids)
											del(asteroids,a)
									end
									
								end
						
					end
			end

end

function crash(plr, asteroids)

	for a in all(asteroids) do
		
		if abs(plr.cx - a.x) < 16 and abs(plr.cy - a.y) < 16 then
			plr.health -= a.dmg
		
			del(asteroids,a)
		end
	
	end
end


-- if big asteroid brown is destroyed
function asteroid_destroyed(asteroids)
	
	for a in all(asteroids) do
		
		-- only if is asteroid 46 and health is under 0
		if a.sprite == 46 and a.health <=0 then
		
		-- destoys the asteroid before
		-- creating the small ones
		
		del(asteroids,a)
		
		add(asteroids, {
		x=a.x ,  
		y=a.y , 
		speed = 0.7,
		dmg = 10,
		sprite = 14,
		health = 10
	
		})
		
		end
		
	end
end

__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001110000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014451000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000144454100000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000144444100000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000145544100000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014441000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001110000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0001d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011110000000000001111000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000177776100000000011fff4100000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000017777661000000001fff444100000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111000000017777666100000001ff44444110000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a99100000017776666510000001f444444410000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000aa9941000001777666655100000144444444411100
00000000000000000000000000000000000000000000000000000000000000000000000000000000000001a99441000001666666551000000144445544444111
00000000000000000000000000000000000000000000000000000000000000000000000000000000000001995441001001666665551000000145445444444441
00000000000000000000000000000000000000000000000000000000000000000000000000000000000001995444114101666655551000000144444444445441
00000000000000000000000000000000000000000000000000000000000000000000000000000000000001a99944455101666655550000000144444445445541
00000000000000000000000000000000000000000000000000000000000000000000000000000000000001aa995499a100166555510000000014444445545541
000000000000000000000000000000000000000000000000000000000000000000000000000000000000001999999a1000166555100000000014445544444441
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a99aa10000016651000000000001445444444411
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111100000001610000000000000144444441110
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000001111111000
__gff__
0000000000000000000000000000030300000000000000000000000000000303000000000000000000000101010101010000000000000000000001010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
