pico-8 cartridge // http://www.pico-8.com
version 43
__lua__





function _init()

	mouse_init()
	sel_menu_init()
	base_map_init()


end

function _update()
	mouse_update(mouse)
	over_menu(mouse)
end

function _draw()
	cls()
	
	-- draws -- 
	draw_base_map(base_map)
	sel_menu_draw(mouse)
	
	
	-- prints
	print(mouse_over_inv,0,0,7)
	mouse_over_tile(mouse)
	mouse_click(mouse)
	
	-- mouse at the bottom to be displayed always on top
	mouse_draw(mouse)
end
-->8
-- mouse --
function mouse_init()

	mouse = {
	
		x=0,
		y=0,
		click = 0,
		sprite = 0
	
	}
	
end

function mouse_update(mouse)
	
	mouse.x=stat(32)
	mouse.y=stat(33)
	mouse.click = stat(34)
	poke(0x5f2d,1)
	
	-- functions --

end

function mouse_draw(mouse)
	spr(mouse.sprite,mouse.x,mouse.y,1,1)
end

function mouse_click(mouse)
	
		left_click = false
		right_click = false
		
		-- if left click
		if mouse.click == 1 then
			left_click = true
		
			print('click left')
			print(left_click)

		end
		
		-- if right click 
		if mouse.click == 2 then
						print('click right')
						right_click = true
						print(right_click)
		end
		
end

-- whcih column and row is the mouse over
function mouse_over_tile(mouse)
	
		tile_x = flr(mouse.x / 8) +	1
		tile_y = flr(mouse.y / 8) + 1

		--	print(base_map[tile_y][tile_x])
  print("row: "..tile_y.." | column: "..tile_x, 0, 5, 7)

end
-->8
-- map base --
function base_map_init()
	
	base_map_tiles = {
	
	grass = 16,
	grass_light = 32
	
	
	}
	
	base_map =	{}
	
	-- fills the base map
	for y=1, 130 do
	
	local number = 0
	
	base_map[y] = {}
			
		for x=1,130 do 
		
			number+=1
				
				if number % 2 == 0 then
				
							base_map[y][x] =base_map_tiles.grass

					else
							base_map[y][x] = base_map_tiles.grass_light
				end
				
		end -- for(2)
		
	end -- for(1)
	

end

function draw_base_map(base_map)

	for y=1,#base_map do
		
		for x=1,#base_map[y] do
			
			local tile = base_map[y][x]
			spr(tile,(x-1)*8,(y-1)*8,2,2)
		end -- for(2)
		
	end -- for(1)
	
end
-->8
-- selection menu -- 
function sel_menu_init()
	
	select_menu = {
	
	{sprite = 22,x=0,y=0,h=1,w=1},	--house
	{sprite = 22,x=0,y=0,h=1,w=1}		--house

	}
	
end

function sel_menu_draw(mouse)

				local inv_x = 0 -- start from
				local inv_y = 125 -- y location
				
				-- inventory 
				-- x1, y1, x2, y2, color
				rectfill(inv_x, inv_y, inv_x + 130, inv_y - 15, 6)
				sel_inv_draw()
end


-- draw the items for the select menu
function sel_inv_draw()

				local inv_x = 0 -- start from
				local inv_y = 125 -- y location
				
				-- from 1 to inv count
				for i = 1, #select_menu do
						
		   	local item_x = inv_x - 14 + 14 * i
		    
		    -- draws in the inv selection
		    spr(select_menu[i].sprite, item_x, inv_y - 13, select_menu[i].h, select_menu[i].w)
						 

		    -- check if mouse is near this item
		    if abs(mouse.x - item_x) <= 8 and abs(mouse.y - (inv_y - 13)) <= 8 then
		       
		        selected_x = item_x

		        if left_click then
											selection = i
										end
										
		    end -- if
    
				end -- for
				
				if selected_x and mouse_over_inv then
		    rect(selected_x, inv_y, selected_x + 14, inv_y - 14, 7)
			end -- if

end

-- check if the mouse is over the inv
function over_menu(mouse)

				local inv_x = 0 -- start from
				local inv_y = 125 -- y location
				
			if mouse.x > inv_x and mouse.x < inv_x + 130 and mouse.y < inv_y and mouse.y > inv_y - 20
					
			then
			
							mouse_over_inv = true
								else
							mouse_over_inv = false

				end

end
-->8


__gfx__
00000000770000770000000000000000000000000000000000099000000000000000000000000000000000000000000000000000000000000000000000000000
00000000700000070333333008888880000000000000000000944900000077777777770000007777777777000000777777777700000000000000000000000000
00700700000000000333373008877880000000000000000009444490000076666666670000007666666667000000766666666700000000000000000000000000
0007700000000000033373300877778000000000000000009444444900007677ddddd700000076dddd77d700000076dd8811d700000000000000000000000000
0007700000000000037373300877778000000000000000009449944900007655ddddd700000076dddd55d700000076d88881d700000000000000000000000000
00700700000000000377333008877880000000000000000094944949000076ddddddd700000076ddddddd700000076d8888dd700000000000000000000000000
00000000700000070333333008888880000000000000000009444490000077777777770000007777777777000000777788777700000000000000000000000000
00000000770000770000000000000000000000000000000009400490000066666666660000006666666666000000666666666600000000000000000000000000
333333330000000000000000000000000000000000000000003bb300000067cc6cccc600000066666666660000006ccc6cccc600000000000000000000000000
33333333000000000000000000000000000000000000000003b33b30000066666666660000006666666666000000666666666600000000000000000000000000
3333333300000000000000000000000000000000000000003b3333b300006c7cc6ccc60000006c66c644660000006cc66cccc600000000000000000000000000
3333b3330000000000000000000000000000000000000000b333333b000066666666660000006666664466000000666666666600000000000000000000000000
33b3b3b30000000000000000000000000000000000000000b33bb33b00006c7c6cccc600000000000000000000006cc6ccccc600000000000000000000000000
333333330000000000000000000000000000000000000000b3b33b3b000066666666660000000000000000000000666666666600000000000000000000000000
3333333300000000000000000000000000000000000000003b3333b300006c7ccc6cc60000000000000000000000666666666600000000000000000000000000
3333333300000000000000000000000000000000000000003b3333b3000066666666660000000000000000000000000000000000000000000000000000000000
bbbbbbbb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbb3bbb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
bb3b3b3b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbbbb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbbbb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbbbb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbbbb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbbbb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000001011101010101011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000001010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000001011101110101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000001010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000001010101010101111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000001010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
