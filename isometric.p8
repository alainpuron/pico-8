pico-8 cartridge // http://www.pico-8.com
version 43
__lua__

-- created a layer system to place
-- different obj to the terrain

-- work on player actions


function _init()

map_layout()
plr_init()
inventory_init()
obj_init()
crop_init()

	-- spawn some tools
obj_spawning(1,objects,plr,'axe')
obj_spawning(1,objects,plr,'shovel')
obj_spawning(1,objects,plr,'hoe')
obj_spawning(5,objects,plr,'carrot_seed')


end

function _update()
plr_update()
select_inv()
obj_pickup(plr,inv)
crop_update()
--check_margin(plr)
end



function _draw()
	cls()
	
	draw_cam(plr)
	draw_map(tiles)
	plr_draw(plr)
	inventory_draw()
	player_looking(plr)

	obj_draw(objects)
	is_tile(0,plr.x,plr.y)
check_margin(plr)

end
-->8
-- map gen --

function map_tiles()
	
	tiles ={
	grass = 8,
	water = 4,
	tree 	= 128,
	soil = 132,
	seeds = 136,
	crops = 140,
	flower = 12
	}
	
	-- tile type
	tree=0 --flag
		
end


function map_layout()

	map_tiles()
	
	map_data = {
  {8,8,8,8,8,8,8,8},
  {8,8,8,8,8,8,8,8},
  {8,8,8,8,8,8,8,8},
  {8,8,8,8,8,8,8,8},
  {8,8,8,8,8,8,8,8},
  {8,8,8,8,8,8,8,8},
  {8,8,8,8,8,8,8,8},
  {8,8,8,8,8,8,8,8},
  {8,8,8,8,8,8,8,8},
  {8,8,8,8,8,8,8,8}
}

	
	f_layer = create_layer(map_data)
	s_layer = create_layer(map_data)
	
	layers = {f_layer, s_layer}

	layer_gen(tiles.tree,f_layer,'common',layers)
	layer_gen(tiles.flower,f_layer,'common',layers)
	layer_gen(tiles.water,f_layer,'common',layers)


end -- function


function create_layer(base)

    local layer = {}
	    for y=1, #base do
	        layer[y] = {}
	        for x=1, #base[y] do
	            layer[y][x] = nil
	        end
	    end
    return layer
end


function iso_coords(x, y)

  local sx = (x - y) * 16 + 64  -- 16 = half width of 32px tile
  local sy = (x + y) * 8        -- 8 = half height of 16px tile
  return sx, sy
  
end

function draw_map(tiles)

 -- gets the height(y) and width(x)
	for y=1,#map_data do
	
    for x=1,#map_data[y] do
    
    		-- what tile is it
      local tile = map_data[y][x]
      local sx, sy = iso_coords(x, y)
      spr(tile, sx, sy, 4, 4)
  				
       -- draw overlay if true
      local to_be_placed = f_layer[y][x]
            
      if to_be_placed then
      	
      	if to_be_placed == tiles.tree then
      		spr(to_be_placed, sx, sy-16, 4, 4)
      	
      	else
      		 spr(to_be_placed, sx, sy, 4, 4)
      	end
      	
														
						end
 
    end -- for loop(2)
    
  end -- for loop(1)
  
end

-- check if (x, y) is empty in all layers
function is_empty_at(x, y, layers)

  for l in all(layers) do
   
   -- is being occupied
    if l[y] and l[y][x] != nil then
       return false
     end
     
  end
  
  return true
  
end


function layer_gen(replacement,layer,app_rate,layers,x_start, x_end,y_start, y_end)

	local used_last = false 
	
	
 	y_start = y_start or 1
  y_end = y_end or #map_data
  x_start = x_start or 1
  x_end = x_end or #map_data[1]

	
	for y=y_start,y_end do
		for x=x_start,x_end do
			
			-- if is on grass and is empty
			if map_data[y][x] == tiles.grass and is_empty_at(x,y,layers) then
			
				local last_chance
				
					if	app_rate == 'common' then
							last_chance = used_last and 4 or 1
					end
					
					if	app_rate == 'rare' then
						 last_chance = used_last and 2 or 1
					end
										
					if flr(rnd(11)) < last_chance then
						layer[y][x] = replacement
						used_last = true
								
						else
							layer[y][x] = nil
							used_last = true
					end -- if(2)
					
				
			end -- if(1)
			
		end -- for(2)
	end -- for(1)
	
		
end -- function

-- generate map as player explores

function check_margin(plr)
	
	 local tx, ty = get_tile_pos(plr.x, plr.y)
	--	local layers = {tree_layer, flower_layer}
	local new_start_x = #map_data[1]
	
		print(tx,plr.x+15,plr.y+15,7)
		print(ty,plr.x,plr.y+15,7)
		
		local new_column = {}
		if (tx + 3) == #map_data[1]  then
					
				for y=1,#map_data do	
				
					for x=1,2 do
						add(map_data[y],tiles.grass)
						add(f_layer,nil)
 
					end -- for(2)

				end	 -- for(1)
				
			layer_gen(tiles.tree,f_layer,'rare',layers,new_start_x, #map_data[1])
			layer_gen(tiles.water,f_layer,'rare',layers,new_start_x, #map_data[1])
			layer_gen(tiles.flower,f_layer,'rare',layers,new_start_x, #map_data[1])

		end -- if(1)
		
		
		
		if (ty+3) == #map_data then
		
				local new_row = {}

		    print('❎❎❎')
		        
    for x=1,#map_data[1] do
    
     add(new_row, tiles.grass)  -- fill with grass

    end
    
    add(map_data,new_row)

    
   
				local new_f_row = {}
				
    for x=1,#map_data[1] do
        add(new_f_row, nil)
    end
    
    add(f_layer, new_f_row)

    -- optionally generate trees only in the new row
    local new_y = #map_data
    layer_gen(tiles.tree, f_layer, 'rare', layers, 1, #map_data[1], new_y, new_y)
				layer_gen(tiles.water,f_layer,'rare',layers,1, #map_data[1], new_y, new_y)
				layer_gen(tiles.flower,f_layer,'rare',layers,1, #map_data[1], new_y, new_y)

  
		end -- if(2)
	

end
 


-->8
-- player --

function plr_init()
	plr =	{
	sprite = 64,
	first_sprite = 64,
	last_sprite = 68,
	height = 2,
	width = 2,
	x = 50,
	y = 50,
	speed = 1,
	animation_timer = 0,
	fx = false,
	fy = false
											}
	


end

function plr_update()
	plr_move(plr)
	actions()
end

function plr_move(plr)

	local dx = 0
	local dy = 0

	if btn(⬆️) then dy -= plr.speed animation(plr) end
	if btn(⬇️) then dy += plr.speed animation(plr) end
	if btn(⬅️) then dx -= plr.speed plr.fx = true animation(plr) end
	if btn(➡️) then dx += plr.speed plr.fx = false animation(plr) end

	local new_x = plr.x + dx
	local new_y = plr.y + dy

	if not  has_flag then
		plr.x = new_x 
		plr.y = new_y 
	end
	
	

end


function actions()
	
	
	if btnp(❎) then
	
		  local tx, ty = get_tile_pos(plr.x, plr.y)
				local layers = {map_data,tree_layer,flower_layer}
				
				for l in all(layers) do 
				
				
				
      local tile = l[ty][tx]
      
      if inv[selection].name == "hoe" then
      	
      	if tile == tiles.grass or tile == tiles.flower then
      		l[ty][tx] = nil -- removes the flower
      		map_data[ty][tx] = tiles.soil -- adds soil
      	end
      	
      	if tile == tiles.seeds then
      		l[ty][tx] = tiles.soil
      	 obj_spawning(1, objects, plr, 'carrot_seed')
      	end
      	
      	if tile == tiles.crops then
      		l[ty][tx] = tiles.soil
      		obj_spawning(4, objects, plr, 'carrot')
      		obj_spawning(1, objects, plr, 'carrot_seed')

      	end
      
      	
      end -- if(1)
      
      
      if not planted and inv[selection].name == "carrot_seed" and inv[selection].amount >= 1  then
      
     		if tile == tiles.soil then
     			
     			l[ty][tx] = tiles.seeds
     	
     			inv[selection].amount -=1
							 	
							 add(seeds,{
									 x=tx,
									 y=ty,
									 grown = false,
									 croptimer = 150,
									 tig = 0 -- time in ground
							 })
							 break
     		end
     		     		
      end -- if(2)
      
      
      if inv[selection].name == 'axe' then
   				
   				if tile == tiles.tree then
   				
   					l[ty][tx] = nil
   					
   					obj_spawning(5, objects, plr, 'log')
								obj_spawning(1, objects, plr, 'tree_sap')
						
   				end
   				
   			end
  		
				end -- for
									
	end -- btnp
	
	

end

function plr_actions()
	
	
	
	if btnp(❎) then
	
  local tx, ty = get_tile_pos(plr.x, plr.y)
  local tile = map_data[ty][tx]
	

		local actions = {
		
			-- grass to soil
			[8] = {
				
				required_item = 'hoe', -- hoe
				new_tile = 132, -- soil
				old_tile = 8
			
			},
			
			-- soil to grass
			[132] = {
			
				required_item = 'hoe', -- hoe
				new_tile = 8, -- grass
				old_tile = 132
			
			},
			
			-- tree chooping
			-- to chop the tree an axe is required(2)
			[128] = {
			
				required_item = 'axe',
				new_tile = 8,
				old_tile = 128,
				
				-- spawns sapplings and logs
				extra_action = function()
					obj_spawning(5, objects, plr, 'log')
					obj_spawning(1, objects, plr, 'tree_sap')
				end
			
			},
			
			
				[4] = {
			
				required_item = 'shovel', -- shovel
				new_tile = 0, -- grass
				old_tile = 4
			
			},
		
		
		}
		
		local action = actions[tile]
		
			-- if under an action tile and have right tool then do
		if action and list_has(inv,action.required_item) and inv[selection].name == action.required_item then
				
				-- swap old tile for new one
				tile_action(plr,  action.new_tile, action.old_tile)
		
			-- if action has an extra action var
			-- then call the function
			if action.extra_action then action.extra_action() end

		end
  
	end -- if (❎)
	
end




function plr_draw(plr)
	spr(plr.sprite,plr.x,plr.y,plr.height,plr.width,plr.fx,plr.fy)

end

function animation(plr)
	
		plr.animation_timer +=1
		
		if plr.animation_timer % 2 == 0 then		
			plr.sprite+=2
		end
			
		if plr.animation_timer >= 6
			then
			plr.sprite = plr.first_sprite
			plr.animation_timer = 0
		end
		
end


-->8
-- camera --

function draw_cam(plr)
	cx=plr.x+8-63
	cy=plr.y+8-63
	camera(cx,cy)
end


function get_pixel_pos(tx, ty)
  local px = (tx - ty) * 16 + 64
  local py = (tx + ty) * 8
  return px, py
end


function player_looking(plr)
  local tx, ty = get_tile_pos(plr.x, plr.y)

  if map_data and map_data[ty] and map_data[ty][tx] then
    local px, py = get_pixel_pos(tx, ty)

    -- draw sprite 0 at the correct pixel position
    spr(0, px, py, 4, 2)
  end
end


-->8

-- reverse isometric projection
-- calculates the actual position
function get_tile_pos(px, py)
  local x = flr(((px - 74) / 16 + py / 8) / 2) + 1
  local y = flr((py / 8 - (px - 64) / 16) / 2) + 1
  return x, y
end

-- changes the tile to something else
function tile_action(plr,tile,to_change)

  local tx, ty = get_tile_pos(plr.x, plr.y)

		-- can change tile only if is over certain tile
  if map_data and map_data[ty][tx] and  map_data[ty][tx] == to_change then
    -- change tile 
    map_data[ty][tx] = tile
  end
  
end

-->8
-- inventory --

function inventory_init()
	
	inv={}
	selection = 1

end

function inventory_draw()
	
	
	rectfill(30,116,98,125,15)
	
	for i=1,#inv do
		spr(inv[i].sprite,22+9*i,117,1,1)
		
		-- prints the amount in inv
	 print(inv[i].amount,22+9*i,120,7)

	end
	
		rect(21+selection*9,116,30+selection*9,125,7)

end

-- inv selection 
function select_inv()
	
		if btnp(🅾️)  then
		 
			if selection < #inv then
				selection+=1
				
				else	
				selection = 1
			end	
				
		end
		
end
-->8
-- obj and pick up --
function obj_init()
	
	objects = {
	
	{	name	='gold',id = 1 ,amount = 0,sprite = 90},
	{ name ='axe',id = 2, amount = 0,sprite = 74},
	{ name ='shovel',id = 3, amount = 0,sprite = 106},
	{ name ='hoe',id = 4, amount = 0,sprite = 122},
	{ name ='log',id = 5, amount = 1,sprite = 224},
	{ name ='tree_sap',id = 6, amount = 0,sprite = 240},
	{ name ='carrot_seed',id = 7, amount = 1,sprite = 96},
	{ name ='carrot',id = 8, amount = 1,sprite = 97}

	}
	
	spawned_objects = {}
	
end

function obj_spawning(how_much,list,plr,name)



	item_to_spawn = nil
	
	-- checks for the item to spawn
	-- in a list based on id
	for item in all(list) do
	
		if item.name == name then
		
			-- item to spawn is then the item
			item_to_spawn = item
			
		end
	
	end
	
	-- if there is an item to spawn
	if item_to_spawn then
	
		for i=1,how_much do
		
			add(spawned_objects, {
		    name = item_to_spawn.name,
		    sprite = item_to_spawn.sprite,
		    amount =	1,
		    id = item_to_spawn.id,
		    x = plr.x + rnd(15),
		    y = plr.y + rnd(15)
		  })	
		  
		end
	
	end
	

end

-- checks if a list has an item
-- based on an id
function list_has(list,name)

  for item in all(list) do
  
    if item.name == name then
     
      return item
      
    end
    
  end
  
  return nil
  
end

-- picks up an object 
function obj_pickup(plr,inv)
	
	 -- object spawned 
		for obj in all(spawned_objects) do
				
				-- if player is close enough
				if abs(plr.x - obj.x) < 8 and abs(plr.y - obj.y) < 8 then
					
					-- checks if exist in the inventory
					local existing = list_has(inv,obj.name)
				
					-- if obj already in the inv
					-- then just add 1 to the amount
					if existing then
					
							existing.amount+=obj.amount
							
							-- delete from spawned objects
							del(spawned_objects,obj)

					end
					
					-- if obj not exist in inv then add it	
					if not existing then
							add(inv,{
							
								name 		=	obj.name,
								id 				= obj.id,
								amount = obj.amount,
								sprite = obj.sprite
				
						})
				
						-- deletes the object from map
						del(spawned_objects,obj)
			
						break
						
				end
		
			
			end	
		
		end
	
end


-- draws the objects to be spawned
function obj_draw()
	
	for obj in all(spawned_objects) do
    spr(obj.sprite, obj.x, obj.y)
  end

end
-->8
-- collitions --

function is_tile(tile_type,x,y)

	 local tx, ty = get_tile_pos(x,y)

		local tile =	f_layer[ty][tx]
		
		
  
		-- tile has flag
		has_flag = fget(tile,tile_type)
	
		print(has_flag)
		print(tile)
		-- if true
		return has_flag

end



-->8
-- seed growing
function crop_init()
	
	seeds = {}
end

function crop_update()

	for s in all(seeds) do
	
	 if not s.grown then
	   s.tig += 1
	
	  if s.tig > s.croptimer then
	    map_data[s.y][s.x] = tiles.crops
	    s.grown = true
	  end
	      
	 end
	 
	end
	
end

__gfx__
00000000000000077000000000000000000000000000000110000000000000000000000000000001100000000000000000000000000000011000000000000000
00000000000007700770000000000000000000000000011cc110000000000000000000000000011bb110000000000000000000000000011bb110000000000000
000000000000000000000000000000000000000000011cccccc11000000000000000000000011bbbbbb11000000000000000000000011bbbbbb1100000000000
0000000000000000000000000000000000000000011cccccccccc1100000000000000000011bbbbbbbbbb1100000000000000000011bbb3bbbbbb11000000000
00000000000000000000000000000000000000011cccccccccccccc110000000000000011bbbbbbbbbbbbbb110000000000000011bbbb3b3bbb3bbb110000000
000000000000000000000000000000000000011cccccccccccccccccc11000000000011bbbbbbbbbbbbbbbbbb11000000000011bbbb7bbbbbb3b3ebbb1100000
0007700000000000000000000007700000011cccccccccccccccccccccc1100000011bbbbbbbbbbbbbbbbbbbbbb1100000011bbb3b7a7bbb7bbbeaebbbb11000
00700000000000000000000000000700001cccccccccccccccccccccccccc100001bbbbbbbbbbbbbbbbbbbbbbbbbb100001bbbb3b3b73bb7a7bb3ebbbbbbb100
0070000000000000000000000000070001cccccccccccccccccccccccccccc10013bbbbbbbbbbbbbbbbbbbbbbbbbb31001bbbbbbbbbb3bb37bbb3bbbbb3bb100
0007700000000000000000000007700001cccccccccccccccccccccccccccc1001333bbbbbbbbbbbbbbbbbbbbbb3331001bbbbb3b3bb3b3bbb3b3bb3b3b31000
0000000000000000000000000000000001cccccccccccccccccccccccccccc100133333bbbbbbbbbbbbbbbbbb33333100011bb3b3b3bbb3bb3b3bb3bbb110000
000000000000000000000000000000000011cccccccccccccccccccccccc1100014433333bbbbbbbbbbbbbb333334410000011bbbbbbbbbbbbbbbbbb11000000
00000000000000000000000000000000000011cccccccccccccccccccc11000001444433333bbbbbbbbbb3333344441000000011bbbb3bb3b3bbbb1100000000
0000000000000000000000000000000000000011cccccccccccccccc110000000144444433333bbbbbb33333444444100000000011bbbb3b3b3b110000000000
000000000000077007700000000000000000000011cccccccccccc1100000000014444444433333bb333334444444410000000000011bbbbbb11000000000000
00000000000000077000000000000000000000000011cccccccc1100000000000144454444443333333344444444441000000000000011bb1100000000000000
0000000000000000000000000000000000000000000011ccc1110000000000000144545444444433344444445544441000000000000000110000000000000000
00000000000000000000000000000000000000000000001110000000000000000144444544444444444444445444441000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000145544444444444444445454444441000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000144544444444444444444444444441000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000144454444444444444444444444441000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000144444444444444444444444444441000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000144444444444454454444444444441000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000014444444444445444444444444410000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000001144444444554444444444441100000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000011444444444444444444110000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000114444444444444411000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000001144444444441100000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000011444444110000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000114411000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000001100000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000011111100000000001111110000000000111111000000000000000000000000000000000000000011100000000000000000000000000000000000000000
00000177777710000000017777771000000001777777100000000000000000000000000000000000000145810000000000000000000000000000000000000000
00001777777771000000177777777100000017777777710000000000000000000000000000000000001448810000000000000000000000000000000000000000
00001777c77c710000001777c77c710000001777c77c710000000000000000000000000000000000014176610000000000000000000000000000000000000000
00001777c77c710000001777c77c710000001777c77c710000000000000000000000000000000000141011100000000000000000000000000000000000000000
00001677777761000000167777776100000016777777610000000000000000000000000000000000010000000000000000000000000000000000000000000000
00000166666610000000016666661000000001666666100000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000011111100000000001111110000000000111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000017777100000000001777710000000000177771000000000000000000000000000000000000001111000000000000000000000000000000000000000000
0000001777710000000000177771000000000017777100000000000000000000000000000000000001aaaa100000000000000000000000000000000000000000
000000177771000000000017777100000000001777710000000000000000000000000000000000001aaaaaa10000000000000000000000000000000000000000
000000177161000000000017716100000000001771610000000000000000000000000000000000001aaaaaa10000000000000000000000000000000000000000
000000177161000000000011116100000000001771110000000000000000000000000000000000001aaaaaa10000000000000000000000000000000000000000
000000111111000000000000011100000000001110000000000000000000000000000000000000001aaaaaa10000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000001aaaa100000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000001111000000000000000000000000000000000000000000
06515150000001000651515000111100065151500011100000000000000000000000000000000000010000000000000000000000000000000000000000000000
1667737100001b101667776101b3b310166777710195910000000000000000000000000000000000141000000000000000000000000000000000000000000000
167aa331000133b1167737711bb3b3b1167f44711955951000000000000000000000000000000000014100000000000000000000000000000000000000000000
17a99a7100199310177883711b3b3bb117f444711959951000000000000000000000000000000000001411100000000000000000000000000000000000000000
1a999a71019991001788837113b33b31174444711599591000000000000000000000000000000000000146610000000000000000000000000000000000000000
1a99a76101991000138837611bbbb3b1164447611995591000000000000000000000000000000000000166610000000000000000000000000000000000000000
1aaa76610011000017337661013b3310166776610195910000000000000000000000000000000000000166610000000000000000000000000000000000000000
01111110000000000111111000111100011111100011100000000000000000000000000000000000000011100000000000000000000000000000000000000000
00111100000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000
01cccc10000000000000000000000000000000000000000000000000000000000000000000000000141000000000000000000000000000000000000000000000
161cc161000000000000000000000000000000000000000000000000000000000000000000000000144111100000000000000000000000000000000000000000
56611665000000000000000000000000000000000000000000000000000000000000000000000000014446510000000000000000000000000000000000000000
15666651000000000000000000000000000000000000000000000000000000000000000000000000001166510000000000000000000000000000000000000000
16555561000000000000000000000000000000000000000000000000000000000000000000000000000166510000000000000000000000000000000000000000
01666610000000000000000000000000000000000000000000000000000000000000000000000000000155510000000000000000000000000000000000000000
00111100000000000000000000000000000000000000000000000000000000000000000000000000000011100000000000000000000000000000000000000000
00000000000000111000000000000000000000000000000110000000000000000000000000000001100000000000000000000000000000011000000000000000
00000000000001bbb110000000000000000000000000011441100000000000000000000000000114411000000000000000000000000001144110000000000000
000000000000131bbbb1000000000000000000000001144444411000000000000000000000011444444110000000000000000000000114444441100000000000
000000000011333111bb100000000000000000000114444444444110000000000000000001144444444441100000000000000000011444435444411000000000
00000000013333333311100000000000000000011444444444444441100000000000000114444444144444411000000000000001144444339544444110000000
00000000013331333333100000000000000001144444444444444444411000000000011444444444444444444110000000000114444444599544444441100000
0000000001bb3b131b33b10000000000000114444444444444444444444110000001144444444444444444444441100000011444444444455444444444411000
00000000131bbb131b3b131000000000001444444444444444444444444441000014444444444444444444444444410000144444354444444444443544444100
000000001331b13331bb131000000000014444444444444444444444444444100144444441444444444444144444441001444443395444444444433954444410
00000000133313333311333100000000014444444444444444444444444444100144444444444444444444444444441001444445995444444444459954444410
00000001333333333333333100000000014444444444444444444444444444100144444444444444444444444444441001444444554444444444445544444410
000000133333b1bbb1b333b100000000001144444444444444444444444411000011444444444444444444444444110000114444444444435444444444441100
00000011b33b131b131b3b1100000000000011444444444444444444441100000000114444444444144444444411000000001144444444339544444444110000
000000131bb13331b1b1b13310000000000000114444444444444444110000000000001144444444444444441100000000000011444444599544444411000000
000001b33113331bb13b1b3b10000000000000001144444444444411000000000000000011444444444444110000000000000000114444455444441100000000
0000011bbbb13331133331b131000000000000000011444444441100000000000000000000114444444411000000000000000000001144444444110000000000
000001311b1333333333311131000000000000000000114441110000000000000000000000001144411100000000000000000000000011444111000000000000
0000001bb1b331222213333331000000000000000000001110000000000000000000000000000011100000000000000000000000000000111000000000000000
00000001111111444411111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000001445410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000001445410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000014444541000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000144454444100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000001444554444410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000014444444454441000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000001444444544410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000114444441100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000001144110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00001441000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00014441000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00144410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
01444100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1f441000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1ff10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0004b300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
003430b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
03034300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00334330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
03045003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00345b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
033b33b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00054000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
00000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0c0c0c0c0c0c0c0c0c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
80808080808080800c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
808080808080801c0c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
808080808080801c0c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000c000000001c1c1c1c1c1c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
