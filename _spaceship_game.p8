pico-8 cartridge // http://www.pico-8.com
version 42
__lua__
function _init()
		map_setup()
  player_init()
  bullet_init()
  asteroid_init()

end

function _update()

	player_update() 
	bullet_update()
	asteroid_update()
	asteroid_behavior()
	--bullet_hits(plr,asteroids)
	asteroid_hit()
--	plr_ast_collition(plr,asteroids)
	
--	bullet_hit(bullets,asteroids)
--	crash(plr,asteroids)

end

function _draw()
  cls()

	player_draw(plr)
	bullet_draw()
	asteroid_draw()
end

-->8
-- player --
function player_init()

	plr={
	angle=0,
	x=64,
	y=64,
	vx=0,
	vy=0,
	r = 6,
	health = 10

	
	}
	
end

function player_update()
	move(plr)
end

function player_draw(plr)

-- angle of rotation (should be updated each frame)
-- assume angle is already defined

-- calculate triangle points
x1 = plr.x + cos(plr.angle) * plr.r
y1 = plr.y + sin(plr.angle) * plr.r

x2 = plr.x + cos(plr.angle + 0.66) * plr.r
y2 = plr.y + sin(plr.angle + 0.66) * plr.r

x3 = plr.x + cos(plr.angle + 1.32) * plr.r
y3 = plr.y + sin(plr.angle + 1.32) * plr.r


-- draw triangle
line(x1, y1, x2, y2, 13) -- right
line(x2, y2, x3, y3, 6) -- bottom
line(x3, y3, x1, y1, 13) -- left
print(plr.angle)
print(plr.health)



end


function move(plr)

  -- moves toward the direction
  if btn(⬆️) then
  	plr.vx += cos(plr.angle) * 2
  	plr.vy += sin(plr.angle) * 2
  end
  

  -- rotation
  if btn(⬅️) then
  plr.angle -= 0.05
  end
  
  if btn(➡️) then
  	plr.angle += 0.05
  end
  
-- apply friction every frame
		plr.vx *= 0.90
		plr.vy *= 0.90
  
-- ship position  
  plr.x += plr.vx 
  plr.y += plr.vy   

		-- when out of screen
  plr.x = (plr.x+128)%128
  plr.y = (plr.y+128)%128

  
end
-->8
-- bullet --

function bullet_init()
	
	-- table for bullets
	bullets={}
end

-- what bullets do
function bullet_update()

	shoot(plr)
	obj_behavior(bullets,b)
	outbound(b,bullets,128)
	
end

function obj_behavior(list,item)
	
	for item in all(list) do
	
		item.x += item.spdx -- x speed
		item.y += item.spdy
	
	end
	
end


function bullet_draw()

	-- draw each bullet created 
	for b in all(bullets) do
	
	-- spr, x,y
		spr(16,b.x,b.y)
	
	end	
	
end

function shoot(plr)

	-- add to the table bullets
	-- the following 
	if btnp(🅾️) then
	
	add(bullets, {
	
	-- bullet starting point
	x= x1 -3 ,  
	y= y1 -7 , 
	dmg = 3,
	-- bullet goes the way ship is
	-- pointing at 
	spdx = plr.vx + cos(plr.angle)*3,
	spdy = plr.vy + sin(plr.angle)*3
	
	})

	end
	
end


-->8
-- asteroid creation --
function asteroid_init()

	-- asteroids table
	asteroids={}
	creation_time=0

end

function asteroid_update()
	creation_time+=1
	-- every second create
	if creation_time >= 30 then
	
	add(asteroids, {
	x=rnd(68) ,  
	y=-68 , 
	speed = 0.7,
	-- select a random sprite
	sprite = rnd({4,36,42,14}),
	})
	
	-- reset the creating time
		creation_time=0

end

end

function asteroid_behavior()
	

	for a in all(asteroids) do
			
			-- asteroid direction
			a.y += a.speed
					
			outbound(a,asteroids,128)
			
	end	
	
end



function asteroid_draw()
	
		for a in all(asteroids) do
	
			spr(a.sprite,a.x,a.y,2,2)
	
		end	

end
-->8
-- asteroids interactions --

function map_setup()
	
	-- tile type
	aste=0
	small_aste=1 
	
end

function outbound(item,list,range)
	
	for item in all(list) do
	
		if item.x > range then
				destroy(list,item)
		end
		
	end
	
end

-- deletes from table
function destroy(list,item)
		del(list,item)
end

-- did two objects collided?
function collided(list,obj,range)
	
	for item in all(list) do
		
		-- if two objects are close enough
		-- then return true
		if(abs(item.x - obj.x) < range and abs(item.y - obj.y) < range)
			then
			
				return true, item
			
		end
		
	end
	
end

-- creates multiple of an object
function create_more(amount,list,item,sprite_value)
	
	for i=1,amount do
		add(list,{
		x	= abs(item.x+rnd(20)),
		y	=	abs(item.y+rnd(20)),
		speed = item.speed,
		sprite = sprite_value	
		})
	end
	
end

-- on asteroid collition

function asteroid_hit()

	 local hit_plr,a = collided(asteroids,plr,10)
	
-- hits player	
		if hit_plr then
			destroy(asteroids,a)
		end
		
-- bullet hit ast	
		for b in all(bullets) do
	
    local hit, a = collided(asteroids, b, 10)
    
    if hit then
      destroy(asteroids, a)
      destroy(bullets, b)
	
      if(a.sprite == 42) then
							create_more(4,asteroids,a,14)
						end
						
      break 
    end
    
  end
		
end



__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000090000000000000000000000
00000000000000000000000000000000000000001110000000000000000000000000000000000000000000000000000000099909890000000000000000000000
0000000000000000000000000000000000000001a991000000000000000000000000000000000000000000000000000000009998888990000000001110000000
00000000000000000000000000000000000000aa99410000000000000000000000000000000000000000000000000000000988888a8890000000014451000000
00000000000000000000000000000000000001a9944100000000000000000000000000000000000000000000000000000099aaa88a8900000000144454100000
0000000000000000000000000000000000000199544100100000000000000000000000000000000000000000000000000099a888888000000000144444100000
000000000000000000000000000000000000019954441141000000000000000000000000000000000000000000000000000088aaaa8900000000145544100000
00000000000000000000000000000000000001a99944455100000000000000000000000000000000000000000000000000098a88888900000000014441000000
00000000000000000000000000000000000001aa995499a100000000000000000000000000000000000000000000000000099988999900000000001110000000
000000000000000000000000000000000000001999999a1000000000000000000000000000000000000000000000000000099098900000000000000000000000
0000000000000000000000000000000000000001a99aa10000000000000000000000000000000000000000000000000000000009900000000000000000000000
00000000000000000000000000000000000000001111100000000000000000000000000000000000000000000000000000000000000000000000000000000000
0001d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000111100000000000000000000000000000000000000000000111100000000000000000000000000000000000000
00000000000000000000000000000000000017777610000000000000000000000000000000000000000011fff410000000000000000000000000000000000000
000000000000000000000000000000000001777766100000000000000000000000000000000000000001fff44410000000000000000000000000000000000000
00000000000000000000000000000000001777766610000000000000000000000000000000000000001ff4444411000000000000000000000000000000000000
00000000000000000000000000000000001777666651000000000000000000000000000000000000001f44444441000000000000000000000000000000000000
00000000000000000000000000000000017776666551000000000000000000000000000000000000014444444441110000000000000000000000000000000000
00000000000000000000000000000000016666665510000000000000000000000000000000000000014444554444411100000000000000000000000000000000
00000000000000000000000000000000016666655510000000000000000000000000000000000000014544544444444100000000000000000000000000000000
00000000000000000000000000000000016666555510000000000000000000000000000000000000014444444444544100000000000000000000000000000000
01100110000000000000000000000000016666555500000000000000000000000000000000000000014444444544554100000000000000000000000000000000
18811881000000000000000000000000001665555100000000000000000000000000000000000000001444444554554100000000000000000000000000000000
18888881000000000000000000000000001665551000000000000000000000000000000000000000001444554444444100000000000000000000000000000000
18888881000000000000000000000000000166510000000000000000000000000000000000000000000144544444441100000000000000000000000000000000
18888881000000000000000000000000000016100000000000000000000000000000000000000000000014444444111000000000000000000000000000000000
01888810000000000000000000000000000001000000000000000000000000000000000000000000000000111111100000000000000000000000000000000000
00188100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000000000000000000000000000030300000000000000000000000000000303000000000000000000000000000001010000000000000000000000000000010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
