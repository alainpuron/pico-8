pico-8 cartridge // http://www.pico-8.com
version 43
__lua__

function _init()
	map_setup()
	plr_init() -- plr def values
end

function _update()
	plr_update() -- update player
end

function _draw()
	cls()
	map()
	
		plr_draw(plr)
		print(has_flag)
end
-->8
function plr_init()
    plr = {
        x = 0,
        y = 0,
        w = 8,
        h = 8,
        speed = 1,
        sp = 1
    }
end


function plr_update()
    plr_move(plr)
end

function plr_move(plr)
				
				local last_x = plr.x -- last x
    local last_y = plr.y -- last y
    

    if btn(⬆️) then plr.y -= plr.speed end
    if btn(⬇️) then plr.y += plr.speed end
    if btn(➡️) then plr.x += plr.speed end
    if btn(⬅️) then plr.x -= plr.speed end
    
    
    -- when blocked return to last position
				last_position(plr,last_x,last_y)
				
end



function plr_draw(plr)
    spr(plr.sp, plr.x, plr.y, 1, 1)
end

-->8
-- collition --

function map_setup()

	-- the object and the flag
	wall = 0 
	
end


function last_position(plr,last_x,last_y)
	
    local left = plr.x
    local right = plr.x + plr.w - 1
    local bottom = plr.y + plr.h - 1
    local top = plr.y
    
     -- if the player is trying
     -- to move into a wall tile, 
     -- cancel the movement by
     -- restoring the previous position

    if not can_move(wall,left, right, top, bottom) then
        plr.x = last_x 
        plr.y = last_y
    end
    
end


-- checks if the player can move
-- to the given position by 
-- testing the four corners 
-- of the hitbox.

function can_move(tile_type, left, right, top, bottom)
    
    -- if any corner of the player's
    -- hitbox overlaps a tile with
    -- the given flag, return false

    return not (
    
        is_tile(tile_type, left, bottom) or
        is_tile(tile_type, right, bottom) or
        is_tile(tile_type, left, top) or
        is_tile(tile_type, right, top)
    )
    
end


-- what kind of tile is 
function is_tile(tile_type, x, y)

    local tile = mget(flr(x / 8), flr(y / 8))
    return fget(tile, tile_type)
    
end

__gfx__
00000000888888880000000033b333bb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000877887780000000033b33b33000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0070070087888788000000003b3333b3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000770008888888800000000333333b3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0007700087888878000000003bb3b3b3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700887777880000000033333bb3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000008888888800000000bb333b33000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000088888888000000003bbb3333000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000303030303030303030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
