pico-8 cartridge // http://www.pico-8.com
version 43
__lua__


function _init()
	paddle_init() -- paddle init
	ball_init() -- ball init
	bricks_init() -- brick init
	 
end

function _update()
	paddle_update(paddle) -- paddle update
	ball_update(ball) -- ball update
end

function _draw()
	cls()
	map()
	paddle_draw(paddle) -- draw paddle
	ball_draw(ball) -- draw ball
	brick_draw(bricks_layout) -- draw bricks
	print(collition(ball,paddle))
end

-->8
-- paddle --


function paddle_init()

	paddle = {
		x=0,
		y=110,
		middle = 4, -- 8 pixel long,half is 4
		sprite = 16
	}
	
end

function paddle_update(paddle)
	
	-- paddle only moves on x axis 
	paddle.x=stat(32) -- x
	
	-- allows mouse to work
	poke(0x5f2d,1)
	
	-- functions --  

	
	
end

function paddle_draw(paddle)
	
	-- draw the paddle 
	spr(paddle.sprite,paddle.x,paddle.y,1,1)
	
end


-->8
-- ball -- 

function ball_init()
	ball = {
		x=0,
		y=30,
		vel_x = 1,
		vel_y = 1,
		max_speed = 10,
		sprite = 1
	
	}
	
	
end


function ball_update(ball)
	
	ball_fall(ball)
	bounce(ball) -- bounce ball
	
end

function ball_draw(ball)
	spr(ball.sprite,ball.x,ball.y,1,1)
end
-->8
-- collition -- 

function ball_fall(b)
	-- fall by defualt 
	b.y += b.vel_y
end -- function


-- bounce ball on contact
function bounce(b)

		-- if a collition happens
	if collition(ball,paddle) then
	
 -- reverse velocity to
 -- simulate bounce
 	 b.vel_y =-b.vel_y

	end -- if
	
	
	
	
end -- function

-- did collition happen?	
function collition(ball,paddle)
	
	if flr(ball.y - paddle.y) == 1 then
		return true
	end
  
end
	
-->8
-- bricks -- 
function bricks_init()
	
	bricks_layout = {
	
	{2,2,2,2,2,2,2,2,2,2,2,2,2},
	{2,2,2,2,2,2,2,2,2,2,2,2,2},
	{2,2,2,2,2,2,2,2,2,2,2,2,2}


	}
	
	bricks={}
	
end

function brick_update()


end

function save_brick()
	
	for y=1, #bricks_layout do
			-- for every column in the row
			for x=1,#bricks_layout[y] do
			
				local brick = bricks_layout[y][x]

				add(bricks,	{
					x = (x-1)*9,
					y = (y-1)*3		
				})
				
			end
		end
	
	
end


function brick_draw(bricks_layout)
		
		
		-- for every row in the table
		for y=1, #bricks_layout do
			-- for every column in the row
			for x=1,#bricks_layout[y] do
			
				local brick = bricks_layout[y][x]
				spr(brick,(x-1)*9,(y-1)*3,1,1)
				
			end
		end
		
end
__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000006666000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000006666000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000003333333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000003333333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
77777777000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
77777777000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
